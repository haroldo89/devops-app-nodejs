

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables: 
  - group: jfrog-artifactory
  - name: key-jfrog
    value: $[variables.key]

  - name: JFROG_REPO_BASE_URL 
    value: "http://34.68.201.128:8082/artifactory"
  - name: JFROG_PUBLISH_REPO_SNAPSHOT_URL 
    value: "devops/repository/nodejs-service-release"

name: $(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: continous_integration
  displayName: continuos integration
  jobs:
  - job: build_application
    displayName: task's nodejs
    steps:
      # get dependencies
      - script: npm install
        name: ts_get_dependencies
        displayName: get dependencies
        continueOnError: false
      
      # generate zip file
      - script: zip -r nodejs_$(Build.BuildId).zip $(System.DefaultWorkingDirectory)/*
        name: compressing_files
        displayName: compressing files
        continueOnError: false
        
      # send file to jfrog repository
      - script: curl -u admin:$(key-jfrog) -X PUT "$(JFROG_REPO_BASE_URL)/$(JFROG_PUBLISH_REPO_SNAPSHOT_URL)/$(Build.BuildId).zip" -T nodejs_$(Build.BuildId).zip
        name: send_files_jfrog
        displayName: send files to jfrog artifactory
        continueOnError: false
    
      # Prepare Analysis Configuration task
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'sonarqube'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'nodejs-azure-devops'
          cliProjectName: 'nodejs-azure-devops'
          cliSources: '.'
      # Run Code Analysis task
      - task: SonarQubeAnalyze@4
      # Publish Quality Gate Result task
      - task: SonarQubePublish@4
        inputs:
          pollingTimeoutSec: '300'
      
      # generate a artifact
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)'
- stage: docker_build
  displayName: docker build and push
  dependsOn: continous_integration
  condition: succeeded()
  jobs:
    - job: docker_tasks
      displayName: docker tasks
      steps:
        - task: Docker@2
          displayName: build_push_image_gcp
          inputs:
            containerRegistry: 'docker-haroldo89'
            repository: 'haroldo89/nodejs-azure-devops'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            tags:  $(Build.BuildId)

        - task: Docker@2
          displayName: build_push_image_gcp
          inputs:
            containerRegistry: 'gcr-tutorial'
            repository: 'xenon-hub-327616/nodejs-azure-devops'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            tags:  $(Build.BuildId)
